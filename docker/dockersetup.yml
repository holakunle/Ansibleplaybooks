# This playbook is about docker & docker compose setup 
# fill free to use but remember to modify the host as you use.
# enjoy
# tags should also be modified

- name: This playbook will update, upgarde the webserver group
  hosts: .......
  become: yes 
  pre_tasks:

#  the first task will do aping test to ensure the servers are reachable

    - name: Do a ping test to certify the status of all servers
      tags: always,ubuntu
      ansible.builtin.ping:

# The second task will be initiated to run update and upgrade WHEN the server is ubuntu
# the when statement can be targetted against any condition you wish: [ RUN ansibile all -m gather_facts --limit (supply the ip) to select any condition | grep ]
# for more conditions           
    
    - name: install apache2, update and upgrade
      tags: always,ubuntu
      ansible.builtin.apt:
        name: 
         - apache2
         - plocate
        update_cache: true
        state: present
      when: ansible_distribution == "Ubuntu"

# this play install Downloads and unzip the website

    - name: This play downloads unzip
      tags: download,ubuntu
      ansible.builtin.apt:
        name: 
         - unzip
        state: present

# Use the unarchive module for extraction of zipped file.
       
    - name: download website and unzip
      unarchive:
        src: https://...........................................................................
        dest: /var/www
        remote_src: yes
        mode: 0644
        owner: root
        group: root

# verify if the system requires a reboot

    - name: Check if the system needs a reboot
      tags: always,ubuntu
      ansible.builtin.stat:
        path: /var/run/reboot-required
        get_md5: no
      register: reboot_required_file

# Reboot the servers if required

    - name: Reboot the system
      tags: always,ubuntu
      ansible.builtin.reboot:
      when: reboot_required_file.stat.exists == true


# NEW PLAYBOOK TO SETUP DOCKER AND SOME SERVICES ON THE PRODUCTION SERVER


- name: This is a playbook to setup docker update and upgrade docker
  hosts: productionserver
  become: yes
  tasks:

# This install docker gpg apt key.

    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

# This tasks installs docker at the latest version as well as wget and curl,
# you can also use docker-ce depending on your distro, i skipped adding the 
# repository url to source since docker is source is already update in 
# ubuntu 22.4. you can also add it if you fill its needed. The when statement will only install on ubuntu

    - name: install docker, wget and curl
      tags: docker
      ansible.builtin.apt:
        name:
          - docker.io
          - wget
          - curl
          - unzip
        state: present
        update_cache: true
      when: ansible_distribution == "Ubuntu"

# LOGIN INTO DOCKER HUB
    - name: login into docker
      community.docker.docker_login:
        username: ................
        password: ................
        state: present
    
# This installs docker compose and set permisions

    - name: Install Docker-Compose&Set Permission
      tags: docker
      ansible.builtin.get_url:
        url: https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: '755'

  # this will installs docker module for python

    - name: install docker module for python
      tags: docker
      ansible.builtin.pip:
        name: docker
        

  # this package installs aptitude another package manager other than apt


    - name: install aptitude
      tags: docker
      ansible.builtin.apt:
        name: aptitude
        state: latest
        update_cache: true


# This installs all the neccesary packages for docker and python

    - name: install required system packages as you wish
      tags: docker
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
        state: latest
        update_cache: true

        
# verify if the system requires a reboot

    - name: Check if the system needs a reboot
      tags: docker
      ansible.builtin.stat:
        path: /var/run/reboot-required
        get_md5: no
      register: reboot_required_file

# Reboot the servers if required

    - name: Reboot the system
      tags: docker
      ansible.builtin.reboot:
      when: reboot_required_file.stat.exists == true
    

    